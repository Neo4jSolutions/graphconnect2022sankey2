  type Geo {
    id: String!
    name: String
  }

  type SankeyRelationship {
    start: String
    end: String
    value: Int
  }

  type Query {

    sankeyByGeoTypeAllCommoditiesByTransportMode(geoType: String!): [SankeyRelationship] @cypher(statement: """
      WITH {
          geotype: $geoType,
          ignoreModes: ['Multiple modes','All modes','Single modes']
      } as params
      MATCH (stat:CommodityStat)-[:COMMODITY]->(c:Commodity), (geoType:GeoType {name:params.geotype})
      MATCH (stat:CommodityStat)-[:BY]->(mode:TransportMode)
      WHERE NOT mode.name IN params.ignoreModes
      MATCH (geoType)<-[:TYPE]-(sender:Geo)-[:SENT]->(stat:CommodityStat)-[:TO]->(dest:Geo)-[:TYPE]->(geoType)
      WITH mode.name as mode, c.name as commodity, sum(stat.tonsInThousands) as tons1000
      WHERE tons1000 > 0
      RETURN {
        start: mode, 
        value: tons1000, 
        end: commodity
      } as result
      UNION
      WITH {
          geotype: $geoType,
          ignoreModes: ['Multiple modes','All modes','Single modes']
      } as params
      MATCH (stat:CommodityStat)-[:COMMODITY]->(c:Commodity), (geoType:GeoType {name:params.geotype})
      MATCH (stat:CommodityStat)-[:BY]->(mode:TransportMode)
      WHERE NOT mode.name IN params.ignoreModes
      MATCH (geoType)<-[:TYPE]-(sender:Geo)-[:SENT]->(stat:CommodityStat)-[:TO]->(dest:Geo)-[:TYPE]->(geoType)
      WITH c.name as commodity, sum(stat.tonsInThousands) as tons1000, dest.name as dest
      WHERE tons1000 > 0
      RETURN {
        start: commodity, 
        value: tons1000, 
        end: dest
      } as result
    """)
  }
